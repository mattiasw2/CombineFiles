using System;
using System.IO;
using System.Windows.Forms;
using Lib;

namespace CombineFiles {
    public partial class Form1 : Form {
        private string lastOutputFile;

        private IFileSystem fileSystem = new FileSystem();
        private Core core = new Core(new FileSystem());

        public Form1() {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e) {
            treeViewFiles.Nodes.Clear();
            string initialDirectory = "C:\\data3\\ssc\\sss7";
            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            LoadDirectory(initialDirectory);
        }

        private void LoadDirectory(string directory) {
            TreeNode rootNode = new TreeNode(directory);
            treeViewFiles.Nodes.Add(rootNode);
            LoadSubDirectories(directory, rootNode);
        }

        private void LoadSubDirectories(string directory, TreeNode node) {
            try {
                var subDirs = Directory.GetDirectories(directory);
                foreach (var dir in subDirs) {
                    if (core.ContainsCsFile(dir)) {
                        TreeNode dirNode = new TreeNode(Path.GetFileName(dir));
                        node.Nodes.Add(dirNode);
                        LoadSubDirectories(dir, dirNode);
                    }
                }

                var files = Directory.GetFiles(directory, "*.cs");
                foreach (var file in files) {
                    if (core.IsNotAutoGenerated(file)) {
                        TreeNode fileNode = new TreeNode(Path.GetFileName(file));
                        node.Nodes.Add(fileNode);
                    }
                }
            }
            catch (UnauthorizedAccessException) {
                // Skip directories that we don't have permission to access
            }
        }


        private void btnCombine_Click(object sender, EventArgs e) {
            CombineSelectedFiles();
        }

        private void CombineSelectedFiles() {
            saveFileDialog.Filter = "All files (*.*)|*.*";
            saveFileDialog.FileName = "combined_file.txt";

            if (saveFileDialog.ShowDialog() == DialogResult.OK) {
                lastOutputFile = saveFileDialog.FileName;

                CombineInto(lastOutputFile);
            }
        }


        private void CombineInto(string targetFile) {
            using (var output = new FileStream(targetFile, FileMode.Create)) {
                foreach (TreeNode node in treeViewFiles.Nodes) {
                    FileSystemNode fileSystemNode = Utils.MapTreeNodeToFileSystemNode(node);
                    core.CombineSelectedFilesRecursive(fileSystemNode, output);
                }
            }

            // Read the combined file content and set the clipboard text
            string combinedFileContent = File.ReadAllText(targetFile);
            Clipboard.SetText(combinedFileContent);

            lastOutputFile = targetFile;
            buttonCombineAgain.Enabled = true;

            MessageBox.Show("Files combined successfully and copied to the clipboard!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }


        private void button1_Click(object sender, EventArgs e) {
            btnCombine_Click(sender, e);
        }

        private void treeViewFiles_AfterCheck(object sender, TreeViewEventArgs e) {
            if (e.Action != TreeViewAction.Unknown) {
                SetAllChildNodeCheckState(e.Node, e.Node.Checked);
            }
        }

        private void SetAllChildNodeCheckState(TreeNode node, bool checkState) {
            foreach (TreeNode childNode in node.Nodes) {
                childNode.Checked = checkState;
                SetAllChildNodeCheckState(childNode, checkState);
            }
        }

        private void buttonCombineAgain_Click(object sender, EventArgs e) {
            if (!string.IsNullOrEmpty(lastOutputFile)) {
                CombineInto(lastOutputFile);
            }
            else {
                MessageBox.Show("Please use the 'Combine Selected Files' button first.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}