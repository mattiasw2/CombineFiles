using System.Text;
using Lib;
using Moq;

namespace LibTests {
    public class CoreTests {
        [Theory]
        [InlineData(new[] { "file1.cs", "file2.cs" }, true)]
        [InlineData(new string[0], false)]
        public void ContainsCsFile_ReturnsCorrectResult(string[] files, bool expectedResult) {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.DirectoryGetFiles(It.IsAny<string>(), "*.cs", SearchOption.AllDirectories))
                .Returns(files);

            var core = new Core(mockFileSystem.Object);

            var result = core.ContainsCsFile("dummyPath");

            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public void ContainsCsFile_ReturnsFalse_WhenUnauthorizedAccessException() {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.DirectoryGetFiles(It.IsAny<string>(), "*.cs", SearchOption.AllDirectories))
                .Throws<UnauthorizedAccessException>();

            var core = new Core(mockFileSystem.Object);

            var result = core.ContainsCsFile("dummyPath");

            Assert.False(result);
        }

        [Theory]
        [InlineData(new[] { "// <auto-generated>", "using System;", "namespace AutoGeneratedNamespace {", "    public class AutoGeneratedClass {", "    }", "}" }, false)]
        [InlineData(new[] { "namespace AutoGeneratedNamespace {", "    public class AutoGeneratedClass {", "    }", "}" }, true)]
        [InlineData(new[] { "using System;", "namespace NotAutoGeneratedNamespace {", "    public class NotAutoGeneratedClass {", "    }", "}" }, true)]
        [InlineData(new string[] { }, true)]
        public void IsNotAutoGenerated_ReturnsCorrectResult(string[] fileLines, bool expectedResult) {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.OpenStreamReader(It.IsAny<string>()))
                .Returns(() => fileLines == null ? null : new StreamReader(new MemoryStream(Encoding.UTF8.GetBytes(string.Join("\n", fileLines)))));

            var core = new Core(mockFileSystem.Object);

            var result = core.IsNotAutoGenerated("dummyPath");

            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public void IsNotAutoGenerated_ReturnsFalse_WhenIOException() {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.OpenStreamReader(It.IsAny<string>()))
                .Throws<IOException>();

            var core = new Core(mockFileSystem.Object);

            var result = core.IsNotAutoGenerated("dummyPath");

            Assert.False(result);
        }
    }
}