using System.IO;
using System.Linq;
using Moq;
using Xunit;
using Lib;

namespace LibTests
{
    public class CoreTests
    {
        [Fact]
        public void ContainsCsFile_ReturnsTrue_WhenCsFilesExist()
        {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.DirectoryGetFiles(It.IsAny<string>(), "*.cs", SearchOption.AllDirectories))
                .Returns(new[] { "file1.cs", "file2.cs" });

            var core = new Core(mockFileSystem.Object);

            var result = core.ContainsCsFile("dummyPath");

            Assert.True(result);
        }

        [Fact]
        public void ContainsCsFile_ReturnsFalse_WhenNoCsFilesExist()
        {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.DirectoryGetFiles(It.IsAny<string>(), "*.cs", SearchOption.AllDirectories))
                .Returns(new string[0]);

            var core = new Core(mockFileSystem.Object);

            var result = core.ContainsCsFile("dummyPath");

            Assert.False(result);
        }

        [Fact]
        public void ContainsCsFile_ReturnsFalse_WhenUnauthorizedAccessException()
        {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.DirectoryGetFiles(It.IsAny<string>(), "*.cs", SearchOption.AllDirectories))
                .Throws<UnauthorizedAccessException>();

            var core = new Core(mockFileSystem.Object);

            var result = core.ContainsCsFile("dummyPath");

            Assert.False(result);
        }

        [Fact]
        public void IsNotAutoGenerated_ReturnsFalse_WhenAutoGenerated()
        {
            string[] fileLines = {
                "// <auto-generated>",
                "using System;",
                "namespace AutoGeneratedNamespace {",
                "    public class AutoGeneratedClass {",
                "    }",
                "}"
            };
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.OpenStreamReader(It.IsAny<string>()))
                .Returns(() => new StreamReader( new MemoryStream(System.Text.Encoding.UTF8.GetBytes(string.Join("\n", fileLines)))));

            var core = new Core(mockFileSystem.Object);

            var result = core.IsNotAutoGenerated("dummyPath");

            Assert.False(result);
        }


        [Fact]
        public void IsNotAutoGenerated_ReturnsTrue_WhenShorterThan5LinesAndNotAutogenerated()
        {
            string[] fileLines = {
                "namespace AutoGeneratedNamespace {",
                "    public class AutoGeneratedClass {",
                "    }",
                "}"
            };
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.OpenStreamReader(It.IsAny<string>()))
                .Returns(() => new StreamReader(new MemoryStream(System.Text.Encoding.UTF8.GetBytes(string.Join("\n", fileLines)))));

            var core = new Core(mockFileSystem.Object);

            var result = core.IsNotAutoGenerated("dummyPath");

            Assert.True(result);
        }

        [Fact]
        public void IsNotAutoGenerated_ReturnsTrue_WhenNotAutoGenerated()
        {
            string[] fileLines = {
                "using System;",
                "namespace NotAutoGeneratedNamespace {",
                "    public class NotAutoGeneratedClass {",
                "    }",
                "}"
            };
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.OpenStreamReader(It.IsAny<string>()))
                .Returns(() => new StreamReader(new MemoryStream(System.Text.Encoding.UTF8.GetBytes(string.Join("\n", fileLines)))));

            var core = new Core(mockFileSystem.Object);

            var result = core.IsNotAutoGenerated("dummyPath");

            Assert.True(result);
        }

        [Fact]
        public void IsNotAutoGenerated_ReturnsFalse_WhenIOException()
        {
            var mockFileSystem = new Mock<IFileSystem>();
            mockFileSystem.Setup(fs => fs.OpenStreamReader(It.IsAny<string>()))
                .Throws<IOException>();

            var core = new Core(mockFileSystem.Object);

            var result = core.IsNotAutoGenerated("dummyPath");

            Assert.False(result);
        }
    }
}
